# Rails学習メモ

## ルーティング

### asオプションの役割
- `as: :task` でルーティングヘルパー生成
- `task_path(id)` → `/tasks/:id`
- `task_url(id)` → 完全URL

```ruby
# 良い例
resources :tasks  # 全RESTfulルート自動生成

# 悪い例（重複）
resources :tasks
get "tasks/:id" => "tasks#show", as: :task
```

### 今日学んだこと
- [ ] resourcesの重複チェック
（resourcesによって追加されるルート）
GET /tasks → tasks#index
GET /tasks/new → tasks#new
POST /tasks → tasks#create
GET /tasks/:id → tasks#show （既にtask_pathヘルパー付き）
GET /tasks/:id/edit → tasks#edit
PATCH/PUT /tasks/:id → tasks#update
DELETE /tasks/:id → tasks#destroy

- [ ] ヘルパーメソッドの確認方法: `rails routes`

## トラブルシューティング

### サーバー接続エラー
```bash
# 解決手順
lsof -ti:3000  # ポート確認
rails server   # サーバー起動
```

---
**更新日**: 2025-01-24

間違ったURL: /1/edit ではなく /tasks/1/edit

editアクション未実装: @task = Task.find(params[:id]) がなかった

構文エラー: コントローラーにタイポが複数あった

## セーフナビゲーション演算子 (2025-09-28)

### 危険な書き方vs安全な書き方
```erb
<!-- 危険: @task未定義でNameError -->
<% if @task && @task.errors.any? %>

<!-- 安全: defined?で存在確認 + &.でnilセーフ -->
<% if defined?(@task) && @task&.errors&.any? %>
```

**ポイント**: `defined?`は変数存在チェック、`&.`はnilの場合スキップ


🚨 発見されたエラーとその原因
1. updateアクションの問題
def update
  @task = Task.find_by(id: params[:id])
  @task.content = params[:content]  # ← 問題：params[:task][:content] であるべき
  @task.save
  redirect_to('task/index')  # ← 問題：間違ったパス
end

正解ver
# Before (問題あり)
@task.content = params[:content]
redirect_to('task/index')

# After (正しい)
@task.update(task_params)
redirect_to @task, notice: 'Task was successfully updated.'

2. データベースとの整合性問題
Taskテーブルには title, content, deadline カラムがある
しかし create アクションでは title のみ設定
update アクションでは content のみ設定

3. Strong Parametersが使われていない
セキュリティ上の問題
Rails のベストプラクティスに反している
# Before (危険)
@task = Task.new(title: params[:task][:title])

# After (安全)
@task = Task.new(task_params)

private
def task_params
  params.require(:task).permit(:title, :content, :deadline)
end

### **1. ERB記法**
```erb
<%= %> = 実行して表示
<% %> = 実行するだけ（表示なし）
<% = %> ← スペース入れるとエラー！
```

### **2. コントローラーの基本メソッド**
```ruby
# データ取得
@tasks = Task.all.order(created_at: :desc)  # 全件を新しい順
@task = Task.find(params[:id])              # ID指定で1件

# showメソッドの正しい書き方
def show
  @task = Task.find(params[:id])  # ← これ
end
# Task.find_by(id(:params[:id])) ← エラー
```

### **3. redirect_to**
```ruby
redirect_to = ページ移動 + メッセージ表示
redirect_to @task, notice: 'メッセージ'
↓
/tasks/ID に移動して「メッセージ」を1回表示
```

### **4. データベース確認コマンド**
```bash
rails runner "puts Task.count"                    # 件数確認
rails runner "Task.all.each { |task| puts task.title }"  # 一覧表示
```

### **5. サーバー関連**
```bash
rails server        # サーバー起動
ps aux | grep rails  # サーバー確認
Ctrl+C              # サーバー停止
```

### **6. ターミナルの種類**
```
Terminal: zsh   = コマンド入力モード
Terminal: ruby  = Rubyプログラム実行中（rails console、rails serverなど）
```

### **7. ブラウザー表示**
```
シンプルブラウザー = VS Code内、リロード必要
外部ブラウザー = より高機能、自動更新
```


GitHub = コード関連のメモ（README、コメント、コミット）
学習メモ = 別の場所（Notion、VS Codeのnotesフォルダなど）

README.md → プロジェクト説明・セットアップ方法
コメント → コード内の説明・TODO
コミット → 変更内容の記録

index = 一覧ページ (/tasks)
show = 詳細ページ (/tasks/1) 
new = 新規作成ページ (/tasks/new)
edit = 編集ページ (/tasks/1/edit)

覚え方: 英単語の意味 + URL構造
/tasks → 一覧
/tasks/ID → 詳細
/tasks/new → 新規
/tasks/ID/edit → 編集


| **アクション** | **ページの種類** | **URL例** | **何をするページ** |
|----------------|------------------|-----------|-------------------|
| `index` | **一覧ページ** | `/tasks` | 全タスクを見る |
| `show` | **詳細ページ** | `/tasks/1` | 1つのタスクを見る |
| `new` | **新規作成ページ** | `/tasks/new` | 新しいタスクを作る |
| `edit` | **編集ページ** | `/tasks/1/edit` | 既存タスクを変更する |
| `create` | 新規保存処理 | `POST /tasks` | newの送信先 |
| `update` | 更新処理 | `PATCH /tasks/1` | editの送信先 |
| `destroy` | 削除処理 | `DELETE /tasks/1` | 削除の実行 |


new = フォーム表示だけ（redirect不要）
create = 保存 + redirect

def new
  @task = Task.new  # フォーム用の空オブジェクト
end

フォームの基本構造:
<%= form_tag("/tasks", method: :post) do %>
  <input name="task[title]">
  <textarea name="task[content]"></textarea>
  <input type="submit" value="送信">
<% end %>

ポイント: submitボタンはform内、name="task[項目名]"


label = 入力欄の説明文（「タイトル:」など）
<label for="title">タイトル:</label>
<input id="title" name="task[title]">

クラス = CSSでデザインするための目印
class="form-input" → 入力欄のスタイル
class="btn btn-primary" → ボタンのスタイル

Rails標準インデント = 2スペース

<div>
  <p>内容</p>        ← 2スペース
    <span>深い</span>  ← 4スペース
</div>

VS Code: Shift+Alt+F で自動整形
右下で「Spaces: 2」確認


required = 必須項目（空で送信できない）
<input type="text" required>

btn-primary = 青色（メイン操作：保存・作成）
btn-secondary = グレー（サブ操作：キャンセル・戻る）
btn-danger = 赤色（危険操作：削除）

使い分け: メイン操作 = primary、その他 = secondary


バリデーション = 入力データのチェック機能
モデルで定義:
validates :title, presence: true      # 必須
validates :title, length: { maximum: 100 }  # 長さ制限

流れ:
1. ユーザー送信 → 2. バリデーション → 3. エラーなら画面に戻す
4. OKなら保存

実装場所: app/models/task.rb



エラーメッセージの配置場所:
form_tag 直後（フォームの一番上）

<%= form_tag(...) do %>
  <!-- ここにエラーメッセージ追加 -->
  <div class="form-group">

理由: 最初に目に入る、Rails標準パターン



エラー表示の正しい書き方:
@task.errors.any?           # 複数形
@task.errors.count          # 複数形  
@task.errors.full_messages  # 複数形

HTMLタグも正確に: <h3></h3>




any? = 「1つでもある？」をチェック

@task.errors.any?
↓
エラーがある → true → エラーメッセージ表示
エラーなし → false → 何も表示しない

条件分岐で必須: if @task.errors.any?




日付の再表示:
value="<%= @task.deadline&.strftime('%Y-%m-%d') %>"

&. = nilチェック（nilなら何もしない）
strftime('%Y-%m-%d') = HTML用の日付フォーマット




エラーメッセージ変更:
モデルで message: オプション指定

validates :title, presence: { message: "を入力してください" }

表示例: "Titleを入力してください"
完全日本語化: config/locales/ja.yml で属性名も変更



@taskの存在チェック追加:
<% if @task && @task.errors.any? %>

理由: 初回アクセス時@taskがnilでエラー
&& = どちらもtrueの時だけ実行

パターン: @task存在確認 → エラー確認 → 表示



<!-- 危険 -->
<% if @task && @task.errors.any? %>

<!-- 安全 -->
<% if defined?(@task) && @task&.errors&.any? %>



user.name   # nilでエラー
user&.name  # nilで安全にnilを返す


.form-input {
  border-radius: 6px;  /* フォーム入力欄の角を丸く */
}

.btn {
  border-radius: 6px;  /* ボタンの角を丸く */
}

存在しないIDへのアクセス対応機能（エラーメッセージの表示）
application_controller.rbに例外ハンドリング追加

tasks_controller.rbの各アクションにrescue文追加

app/views/errors/not_found.html.erb作成

application.cssにエラーページ用CSS追加

存在しないIDでテスト（/tasks/99999）


